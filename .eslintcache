[{"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\index.js":"1","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\App.js":"2","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Error.js":"3","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Header.js":"4","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\pages\\Home.js":"5","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Loader.js":"6","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Settings.js":"7","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\pages\\Status.js":"8","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\pages\\Logs.js":"9","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\scripts\\Checks.js":"10","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\pages\\Commands.js":"11","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\handlers\\ManifestHandler.js":"12","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\Misc.js":"13","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Misc.js":"14","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\requests\\Database.js":"15","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\requests\\API.js":"16","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\requests\\BungieReq.js":"17","D:\\Programs\\marvin.gg\\src\\index.js":"18","D:\\Programs\\marvin.gg\\src\\App.js":"19","D:\\Programs\\marvin.gg\\src\\modules\\Header.js":"20","D:\\Programs\\marvin.gg\\src\\modules\\Error.js":"21","D:\\Programs\\marvin.gg\\src\\modules\\Settings.js":"22","D:\\Programs\\marvin.gg\\src\\modules\\Loader.js":"23","D:\\Programs\\marvin.gg\\src\\pages\\Home.js":"24","D:\\Programs\\marvin.gg\\src\\pages\\Commands.js":"25","D:\\Programs\\marvin.gg\\src\\pages\\Logs.js":"26","D:\\Programs\\marvin.gg\\src\\modules\\scripts\\Checks.js":"27","D:\\Programs\\marvin.gg\\src\\pages\\Status.js":"28","D:\\Programs\\marvin.gg\\src\\modules\\handlers\\ManifestHandler.js":"29","D:\\Programs\\marvin.gg\\src\\modules\\Misc.js":"30","D:\\Programs\\marvin.gg\\src\\Misc.js":"31","D:\\Programs\\marvin.gg\\src\\modules\\requests\\BungieReq.js":"32","D:\\Programs\\marvin.gg\\src\\modules\\requests\\API.js":"33","D:\\Programs\\marvin.gg\\src\\modules\\SmallLoader.js":"34","D:\\Programs\\marvin.gg\\src\\modules\\requests\\DiscordAuth.js":"35"},{"size":146,"mtime":1604389014457,"results":"36","hashOfConfig":"37"},{"size":3484,"mtime":1607597609257,"results":"38","hashOfConfig":"37"},{"size":459,"mtime":1607379718560,"results":"39","hashOfConfig":"37"},{"size":6872,"mtime":1607596271923,"results":"40","hashOfConfig":"37"},{"size":5198,"mtime":1607379044508,"results":"41","hashOfConfig":"37"},{"size":2454,"mtime":1606708881437,"results":"42","hashOfConfig":"37"},{"size":43,"mtime":1607596943924,"results":"43","hashOfConfig":"37"},{"size":25636,"mtime":1607596108627,"results":"44","hashOfConfig":"37"},{"size":9453,"mtime":1607596103937,"results":"45","hashOfConfig":"37"},{"size":1594,"mtime":1607596462846,"results":"46","hashOfConfig":"37"},{"size":9562,"mtime":1607564879105,"results":"47","hashOfConfig":"37"},{"size":10304,"mtime":1607597320942,"results":"48","hashOfConfig":"37"},{"size":7153,"mtime":1600217480698,"results":"49","hashOfConfig":"37"},{"size":7153,"mtime":1600217480698,"results":"50","hashOfConfig":"37"},{"size":869,"mtime":1607596198535,"results":"51","hashOfConfig":"37"},{"size":2496,"mtime":1606728837144,"results":"52","hashOfConfig":"37"},{"size":4423,"mtime":1586573135581,"results":"53","hashOfConfig":"37"},{"size":146,"mtime":1604389014457,"results":"54","hashOfConfig":"55"},{"size":4800,"mtime":1607653161722,"results":"56","hashOfConfig":"55"},{"size":4563,"mtime":1607653061853,"results":"57","hashOfConfig":"55"},{"size":459,"mtime":1607379718560,"results":"58","hashOfConfig":"55"},{"size":43,"mtime":1607596943924,"results":"59","hashOfConfig":"55"},{"size":2454,"mtime":1606708881437,"results":"60","hashOfConfig":"55"},{"size":5198,"mtime":1607379044508,"results":"61","hashOfConfig":"55"},{"size":9562,"mtime":1607564879105,"results":"62","hashOfConfig":"55"},{"size":9453,"mtime":1607596103937,"results":"63","hashOfConfig":"55"},{"size":845,"mtime":1607644829146,"results":"64","hashOfConfig":"55"},{"size":25636,"mtime":1607596108627,"results":"65","hashOfConfig":"55"},{"size":11918,"mtime":1607646490462,"results":"66","hashOfConfig":"55"},{"size":7153,"mtime":1600217480698,"results":"67","hashOfConfig":"55"},{"size":7153,"mtime":1600217480698,"results":"68","hashOfConfig":"55"},{"size":4792,"mtime":1607605519979,"results":"69","hashOfConfig":"55"},{"size":2496,"mtime":1606728837144,"results":"70","hashOfConfig":"55"},{"size":1025,"mtime":1607647242334,"results":"71","hashOfConfig":"55"},{"size":2059,"mtime":1607653273833,"results":"72","hashOfConfig":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"1uveolp",{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"75"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"75"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"75"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v65x0w",{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"121"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"121"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\index.js",[],["150","151"],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\App.js",["152"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { generate } from 'build-number-generator';\r\n\r\nimport Header from './modules/Header';\r\nimport Home from './pages/Home';\r\nimport Commands from './pages/Commands';\r\nimport Status from './pages/Status';\r\nimport Logs from './pages/Logs';\r\nimport Error from './modules/Error';\r\nimport Loader from './modules/Loader';\r\nimport * as Settings from './modules/Settings';\r\nimport * as Checks from './modules/scripts/Checks';\r\nimport * as Manifest from './modules/handlers/ManifestHandler';\r\nimport './css/style.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    currentPage: \"home\",\r\n    siteVersion: \"1.0.2\",\r\n    showSettingsModal: false,\r\n    isLive: false\r\n  }\r\n  async componentDidMount() {\r\n    this.setState({ status: { status: 'startingUp', statusText: `Loading Guardianstats ${ this.state.siteVersion }`, loading: true } });\r\n    if(!localStorage.getItem(\"siteVersion\")) { this.forceReset(); }\r\n    else {\r\n      this.updatePage();\r\n      if(localStorage.getItem(\"siteVersion\") === this.state.siteVersion) {\r\n        if(!await Checks.checkSettingsExist()) { Settings.setDefaultSettings(); }\r\n        //Manifest.loadManifest();\r\n      }\r\n      else { this.forceReset(); }\r\n    }\r\n  }\r\n  updatePage() {\r\n    if(!localStorage.getItem(\"currentPage\") || window.location.pathname.split(\"/\")[1] !== localStorage.getItem(\"currentPage\")) {\r\n      var currentPage = window.location.pathname.split(\"/\")[1];\r\n      if(currentPage === \"\" || currentPage === \"failed\") { currentPage = \"home\"; }\r\n      localStorage.setItem(\"currentPage\", currentPage);\r\n      this.setState({ currentPage: currentPage });\r\n    }\r\n    else { this.setState({ currentPage: localStorage.getItem(\"currentPage\") }); }\r\n  }\r\n  setPage = (page) => { localStorage.setItem(\"currentPage\", page); this.setState({ currentPage: page }); }\r\n  getRandomBackground() {\r\n    const backgrounds = [\"BlueGradient\", \"GreenGradient\", \"MidnightGradient\", \"PurpleGradient\"];\r\n    return `var(--${ backgrounds[Math.floor(Math.random() * backgrounds.length)] })`;\r\n  }\r\n  forceReset() {\r\n    localStorage.clear();\r\n    indexedDB.deleteDatabase(\"manifest\");\r\n    localStorage.setItem(\"siteVersion\", this.state.siteVersion);\r\n    window.location.reload();\r\n  }\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"app\" style={{ background: this.getRandomBackground() }}>\r\n          <div className=\"footer\">Beta { generate({ version: this.state.siteVersion, versionSeparator: \"-\" }) }</div>\r\n          <Header setPage={ ((page) => this.setPage(page)) } currentPage={ this.state.currentPage } />\r\n          <Switch>\r\n            <Route path=\"/\" render={ props => {\r\n              switch(props.location.pathname) {\r\n                case \"/\": { return <Home /> }\r\n                case \"/home\": { return <Home /> }\r\n                case \"/commands\": { return <Commands /> }\r\n                case \"/status\": { return <Status /> }\r\n                case \"/logs\": { return <Logs /> }\r\n                case \"/loader\": { return <Loader statusText={ \"Testing\" } /> }\r\n                case \"/discord\": { return (window.location.href = \"https://discord.gg/jbEbYej\") }\r\n                case \"/test\": { return \"\" }\r\n                default: { return <Error error={ \"This page was not found\" } /> }\r\n              }\r\n            }}/>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Error.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Header.js",["153","154","155"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Config from '../Config';\r\nimport * as Misc from '../Misc';\r\nimport * as apiRequest from '../modules/requests/API';\r\n\r\nexport class Header extends Component {\r\n\r\n  state = {\r\n    loggedIn: false,\r\n    isAdmin: false,\r\n    showCopied: false,\r\n    platforms: null\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.getPlatforms();\r\n  }\r\n\r\n  GotoAuth() {\r\n    this.props.setPage(\"home\");\r\n    window.location.href = `https://www.bungie.net/en/oauth/authorize?client_id=${ Config.client_Id }&response_type=code&state=1`;\r\n  }\r\n\r\n  getPlatforms() {\r\n    if(localStorage.getItem(\"adminToken\")) {\r\n      const adminToken = localStorage.getItem(\"adminToken\");\r\n      apiRequest.CheckAuthorization({ token: adminToken }).then((response) => { if(response.code === 200) { this.setState({ isAdmin: true }); } });\r\n    }\r\n    if(localStorage.getItem(\"DestinyMemberships\")) {\r\n      let BungieMemberships = JSON.parse(localStorage.getItem(\"DestinyMemberships\"));\r\n      let platforms = [];\r\n      for(var i in BungieMemberships) {\r\n        platforms.push({\r\n          \"platform\": Misc.getPlatformName(BungieMemberships[i].membershipType),\r\n          \"name\": BungieMemberships[i].displayName,\r\n          \"id\": BungieMemberships[i].membershipId\r\n        });\r\n      }\r\n      this.setState({ loggedIn: true, platforms });\r\n    }\r\n  }\r\n  setPlatform(event) {\r\n    var selectedMbmId = event.target.id;\r\n    localStorage.setItem(\"SelectedAccount\", JSON.stringify(this.state.platforms.find(e => e.id === selectedMbmId)));\r\n    this.setState(this.state);\r\n  }\r\n\r\n  toggleMenuSlider() { console.log(\"Toggled Menu\"); }\r\n  toggleSettingsModal() {\r\n    console.log(\"Toggled\");\r\n    this.props.toggleSettingsModal();\r\n  }\r\n  showMembershipId() {\r\n    this.setState({ showCopied: true, });\r\n    setTimeout(() => { this.setState({ showCopied: false, }); }, 10000);\r\n  }\r\n\r\n  render() {\r\n    const { loggedIn, isAdmin, platforms } = this.state;    \r\n    return (\r\n      <header className=\"header\">\r\n        <div className=\"top-header\">\r\n          <div className=\"header-logo\">\r\n            <img src=\"/images/icons/logo.png\" alt=\"logo\" />\r\n            <div className=\"header-home-link\">Marvin</div>\r\n          </div>\r\n          <div className=\"header-user-containter\">\r\n          {\r\n            loggedIn ? (\r\n              <div className=\"header-username\">\r\n                {\r\n                  localStorage.getItem(\"SelectedAccount\") === \"Please Select Platform\" ? ( <div>{ localStorage.getItem(\"SelectedAccount\") }</div> ) :\r\n                  (\r\n                    <div className=\"platformSelection\">\r\n                      <div className=\"platformName\">\r\n                        <img alt=\"platformLogo\" src={`./images/icons/platforms/${ (JSON.parse(localStorage.getItem(\"SelectedAccount\")).platform).toLowerCase() }.png`} />\r\n                        <div onClick={ () => this.showMembershipId() }>{ JSON.parse(localStorage.getItem(\"SelectedAccount\")).name }</div>\r\n                      </div>\r\n                      <div className={ this.state.showCopied ? 'platformMbmId show' : 'platformMbmId' }>{ JSON.parse(localStorage.getItem(\"SelectedAccount\")).id }</div>\r\n                    </div>\r\n                  )\r\n                }\r\n                {\r\n                  localStorage.getItem(\"SelectedAccount\") === \"Please Select Platform\" ? (\r\n                    platforms.map(function(platform) {\r\n                      return (\r\n                        <div className=\"platformSelection\">\r\n                          <img alt=\"platformLogo\" src={`./images/icons/platforms/${ (platform.platform).toLowerCase() }.png`} />\r\n                          <div onClick={ ((e) => this.setPlatform(e)) } id={ platform.id }>{ platform.name }</div>\r\n                        </div>\r\n                      )\r\n                    }, this)\r\n                  ) : null\r\n                }\r\n              </div>\r\n            ) : ( <div className=\"header-login-link\" onClick={ (() => this.GotoAuth()) }>Connect</div> )\r\n          }\r\n          </div>\r\n        </div>\r\n        <div className=\"left-header\">\r\n          <div className=\"header-menu\">\r\n            <div className={ `header-menu-item ${ this.props.currentPage === \"home\" ? \"active\" : \"\" }` }>\r\n              <img alt=\"home-icon\" className=\"header-menu-item-icon\" src=\"/images/icons/home.png\" />\r\n              <Link className=\"header-link\" to=\"/home\" onClick={ () => this.props.setPage(\"home\") }>Home</Link>\r\n              <img alt=\"arrow-icon\" className=\"header-menu-item-arrow\" src=\"/images/icons/arrow.png\" />\r\n            </div>\r\n            <div className={ `header-menu-item ${ this.props.currentPage === \"commands\" ? \"active\" : \"\" }` }>\r\n              <img alt=\"clans-icon\" className=\"header-menu-item-icon\" src=\"/images/icons/clans.png\" />\r\n              <Link className=\"header-link\" to=\"/commands\" onClick={ () => this.props.setPage(\"commands\") }>Commands</Link>\r\n              <img alt=\"arrow-icon\" className=\"header-menu-item-arrow\" src=\"/images/icons/arrow.png\" />\r\n            </div>\r\n            {\r\n              isAdmin ? (\r\n                <React.Fragment>\r\n                  <div className={ `header-menu-item ${ this.props.currentPage === \"status\" ? \"active\" : \"\" }` }>\r\n                    <img alt=\"discord-icon\" className=\"header-menu-item-icon\" src=\"/images/icons/discord.png\" />\r\n                    <Link className=\"header-link\" to=\"/status\" onClick={ () => this.props.setPage(\"status\") }>Status</Link>\r\n                    <img alt=\"arrow-icon\" className=\"header-menu-item-arrow\" src=\"/images/icons/arrow.png\" />\r\n                  </div>\r\n                  <div className={ `header-menu-item ${ this.props.currentPage === \"logs\" ? \"active\" : \"\" }` }>\r\n                    <img alt=\"discord-icon\" className=\"header-menu-item-icon\" src=\"/images/icons/logs.png\" />\r\n                    <Link className=\"header-link\" to=\"/logs\" onClick={ () => this.props.setPage(\"logs\") }>Logs</Link>\r\n                    <img alt=\"arrow-icon\" className=\"header-menu-item-arrow\" src=\"/images/icons/arrow.png\" />\r\n                  </div>\r\n                </React.Fragment>\r\n              ) : null\r\n            }\r\n          </div>\r\n          <div className=\"donation-links\">\r\n            <a href=\"https://paypal.me/guardianstats\" className=\"donate-link\" id=\"paypal\"><img src=\"./images/icons/paypal.png\" width=\"26px\" height=\"26px\" /></a>\r\n            <a href=\"https://www.patreon.com/Terrii\" className=\"donate-link\" id=\"patreon\"><img src=\"./images/icons/patreon.png\" width=\"26px\" height=\"26px\" /></a>\r\n            <a href=\"https://ko-fi.com/terrii_dev\" className=\"donate-link\" id=\"kofi\"><img src=\"./images/icons/kofi.png\" width=\"26px\" height=\"26px\" />Buy me a coffee?</a>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\pages\\Home.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Loader.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Settings.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\pages\\Status.js",["156","157","158","159"],"import React from 'react';\r\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, AreaSeries } from 'react-vis';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Error from '../modules/Error';\r\nimport Loader from '../modules/Loader';\r\nimport { formatSmallTime } from '../modules/Misc';\r\nimport * as apiRequest from '../modules/requests/API';\r\n\r\nlet updateTimer = null;\r\nlet updateAPIStatusTimer = null;\r\n\r\nclass Status extends React.Component {\r\n  state = {\r\n    status: {\r\n      status: 'startUp',\r\n      statusText: 'Getting ready!',\r\n      error: null,\r\n      loading: true\r\n    },\r\n    backendData: {\r\n      index: [],\r\n      rt_index: [],\r\n      clans: [],\r\n      rt_clans: [],\r\n      processing: [],\r\n      rt_processing: [],\r\n      uptime: [],\r\n      speed: [],\r\n      APIStatus: [],\r\n      APIFaults: 0\r\n    },\r\n    frontendData: {\r\n      users: [],\r\n      servers: [],\r\n      commandsInput: [],\r\n      uptime: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ status: { status: 'startUp', statusText: `Getting Live Analytics...`, loading: true } });\r\n    this.CheckAuthorization();\r\n  }\r\n\r\n  componentWillUnmount() { clearInterval(updateTimer); updateTimer = null; clearInterval(updateAPIStatusTimer); updateAPIStatusTimer = null; }\r\n\r\n  async CheckAuthorization() {\r\n    const adminToken = localStorage.getItem(\"adminToken\");\r\n    if(adminToken) {\r\n      await apiRequest.CheckAuthorization({ token: adminToken }).then((response) => {\r\n        if(response.code === 200) {\r\n          if(this.state.status.status === \"startUp\") { this.SetupAnalytics(); }\r\n          setTimeout(() => this.CheckAuthorization(), 1000 * 60);\r\n        }\r\n        else { window.location.href = \"/\"; }\r\n      });\r\n    }\r\n    else { window.location.href = \"/\"; }\r\n  }\r\n  async SetupAnalytics() {\r\n    let backend; let frontend; let apiStatus;\r\n\r\n    await Promise.all([await apiRequest.GetBackendStatusHistory(), await apiRequest.GetFrontendStatusHistory(), await apiRequest.GetDailyAPIStatus()]).then((response) => {\r\n      backend = response[0];\r\n      frontend = response[1];\r\n      apiStatus = response[2];\r\n    });\r\n\r\n    if(!backend?.isError && !frontend?.isError && !apiStatus?.isError) {\r\n      //Define variables\r\n      let index = [], rt_index = [], clans = [], rt_clans = [], processing = [], rt_processing = [], backend_uptime = [], speed = []; \r\n      let users = [], servers = [], commandsInput = [], frontend_uptime = [];\r\n      let APIFaults = { logs: 0, faults: 0 };\r\n      let hours = new Date().getHours();\r\n      let APIStatus = {\r\n        0: { id: 0, faults: 0, defined: false, time: \"12-1am\", date : null, offset: 0-hours > 0 ? 0-hours-24 : 0-hours }, \r\n        1: { id: 1, faults: 0, defined: false, time: \"1-2am\", date: null, offset: 1-hours > 0 ? 1-hours-24 : 1-hours }, \r\n        2: { id: 2, faults: 0, defined: false, time: \"2-3am\", date: null, offset: 2-hours > 0 ? 2-hours-24 : 2-hours }, \r\n        3: { id: 3, faults: 0, defined: false, time: \"3-4am\", date: null, offset: 3-hours > 0 ? 3-hours-24 : 3-hours }, \r\n        4: { id: 4, faults: 0, defined: false, time: \"4-5am\", date: null, offset: 4-hours > 0 ? 4-hours-24 : 4-hours }, \r\n        5: { id: 5, faults: 0, defined: false, time: \"5-6am\", date: null, offset: 5-hours > 0 ? 5-hours-24 : 5-hours }, \r\n        6: { id: 6, faults: 0, defined: false, time: \"6-7am\", date: null, offset: 6-hours > 0 ? 6-hours-24 : 6-hours },\r\n        7: { id: 7, faults: 0, defined: false, time: \"7-8am\", date: null, offset: 7-hours > 0 ? 7-hours-24 : 7-hours }, \r\n        8: { id: 8, faults: 0, defined: false, time: \"8-9am\", date: null, offset: 8-hours > 0 ? 8-hours-24 : 8-hours }, \r\n        9: { id: 9, faults: 0, defined: false, time: \"9-10am\", date: null, offset: 9-hours > 0 ? 9-hours-24 : 9-hours }, \r\n        10: { id: 10, faults: 0, defined: false, time: \"10-11am\", date: null, offset: 10-hours > 0 ? 10-hours-24 : 10-hours }, \r\n        11: { id: 11, faults: 0, defined: false, time: \"11am-12pm\", date: null, offset: 11-hours > 0 ? 11-hours-24 : 11-hours }, \r\n        12: { id: 12, faults: 0, defined: false, time: \"12-1pm\", date: null, offset: 12-hours > 0 ? 12-hours-24 : 12-hours },\r\n        13: { id: 13, faults: 0, defined: false, time: \"1-2pm\", date: null, offset: 13-hours > 0 ? 13-hours-24 : 13-hours }, \r\n        14: { id: 14, faults: 0, defined: false, time: \"2-3pm\", date: null, offset: 14-hours > 0 ? 14-hours-24 : 14-hours }, \r\n        15: { id: 15, faults: 0, defined: false, time: \"3-4pm\", date: null, offset: 15-hours > 0 ? 15-hours-24 : 15-hours }, \r\n        16: { id: 16, faults: 0, defined: false, time: \"4-5pm\", date: null, offset: 16-hours > 0 ? 16-hours-24 : 16-hours }, \r\n        17: { id: 17, faults: 0, defined: false, time: \"5-6pm\", date: null, offset: 17-hours > 0 ? 17-hours-24 : 17-hours }, \r\n        18: { id: 18, faults: 0, defined: false, time: \"6-7pm\", date: null, offset: 18-hours > 0 ? 18-hours-24 : 18-hours },\r\n        19: { id: 19, faults: 0, defined: false, time: \"7-8pm\", date: null, offset: 19-hours > 0 ? 19-hours-24 : 19-hours }, \r\n        20: { id: 20, faults: 0, defined: false, time: \"8-9pm\", date: null, offset: 20-hours > 0 ? 20-hours-24 : 20-hours },\r\n        21: { id: 21, faults: 0, defined: false, time: \"9-10pm\", date: null, offset: 21-hours > 0 ? 21-hours-24 : 21-hours },\r\n        22: { id: 22, faults: 0, defined: false, time: \"10-11pm\", date: null, offset: 22-hours > 0 ? 22-hours-24 : 22-hours },\r\n        23: { id: 23, faults: 0, defined: false, time: \"11pm-12am\", date: null, offset: 23-hours > 0 ? 23-hours-24 : 23-hours }\r\n      };\r\n\r\n      //Add new data\r\n      const liveBackendData = backend.data.reverse();\r\n      const liveFrontendData = frontend.data.reverse();\r\n      const liveAPIStatusData = apiStatus.data.reverse();\r\n\r\n      for(let i in liveBackendData) {\r\n        index.push({ x: new Date(liveBackendData[i].date), y: liveBackendData[i].index });\r\n        rt_index.push({ x: new Date(liveBackendData[i].date), y: liveBackendData[i].rt_index });\r\n        clans.push({ x: new Date(liveBackendData[i].date), y: liveBackendData[i].clans });\r\n        rt_clans.push({ x: new Date(liveBackendData[i].date), y: liveBackendData[i].rt_clans });\r\n        processing.push({ x: new Date(liveBackendData[i].date), y: liveBackendData[i].processing });\r\n        rt_processing.push({ x: new Date(liveBackendData[i].date), y: liveBackendData[i].rt_processing });\r\n        backend_uptime.push({ x: new Date(liveBackendData[i].date), y: liveBackendData[i].uptime });\r\n        speed.push({ x: new Date(liveBackendData[i].date), y: liveBackendData[i].speed });\r\n      }\r\n\r\n      for(let i in liveFrontendData) {\r\n        users.push({ x: new Date(liveFrontendData[i].date), y: liveFrontendData[i].users });\r\n        servers.push({ x: new Date(liveFrontendData[i].date), y: liveFrontendData[i].servers });\r\n        commandsInput.push({ x: new Date(liveFrontendData[i].date), y: liveFrontendData[i].commandsInput });\r\n        frontend_uptime.push({ x: new Date(liveFrontendData[i].date), y: liveFrontendData[i].uptime });\r\n      }\r\n\r\n      //Set loop index and go through and find faults.\r\n      for(let i in liveAPIStatusData) {\r\n        if(!APIStatus[new Date(liveAPIStatusData[i].date).getHours()].defined) { APIStatus[new Date(liveAPIStatusData[i].date).getHours()].defined = true; }\r\n        if(!liveAPIStatusData[i].APIStatus) { APIStatus[new Date(liveAPIStatusData[i].date).getHours()].faults++; APIFaults.faults++; }\r\n        APIStatus[new Date(liveAPIStatusData[i].date).getHours()].date = liveAPIStatusData[i].date;\r\n        APIFaults.logs++;\r\n      }\r\n\r\n      //Save state\r\n      this.setState({\r\n        backendData: { index, rt_index, clans, rt_clans, processing, rt_processing, uptime: backend_uptime, speed, APIStatus, APIFaults },\r\n        frontendData: { users, servers, commandsInput, uptime: frontend_uptime }\r\n      });\r\n\r\n      //Set Interval of Refresh\r\n      if(updateTimer === null) { updateTimer = setInterval(() => { this.UpdateAnalytics(); }, 1000); }\r\n      if(updateAPIStatusTimer === null) { updateAPIStatusTimer = setInterval(() => { this.UpdateAPIStatus(); }, 60000 ); }\r\n    }\r\n    else {\r\n      //Save error state\r\n      this.setState({ status: { status: 'error', statusText: `Error Loading Analytics. Server Offline. Re-checking in 5 seconds.`, loading: false } });\r\n      setTimeout(() => this.SetupAnalytics(), 5000);\r\n    }\r\n  }\r\n  async UpdateAnalytics() {\r\n    let backend; let frontend;\r\n    await Promise.all([await apiRequest.GetBackendStatus(), await apiRequest.GetFrontendStatus()]).then((response) => { backend = response[0]; frontend = response[1]; });\r\n\r\n    if(!backend?.isError && !frontend?.isError) {\r\n      const backendData = backend.data[0];\r\n      const frontendData = frontend.data[0];\r\n      \r\n      //Grab previous logged data\r\n      let { index, rt_index, clans, rt_clans, processing, rt_processing, speed, APIStatus, APIFaults } = this.state.backendData;\r\n      let { users, servers, commandsInput } = this.state.frontendData;\r\n      let backend_uptime = this.state.backendData.uptime;\r\n      let frontend_uptime = this.state.frontendData.uptime;\r\n\r\n      //Cap array at 1 minute\r\n      if(index.length >= 300){ index.shift(); }\r\n      if(rt_index.length >= 300){ rt_index.shift(); }\r\n      if(clans.length >= 300){ clans.shift(); }\r\n      if(rt_clans.length >= 300){ rt_clans.shift(); }\r\n      if(processing.length >= 300){ processing.shift(); }\r\n      if(rt_processing.length >= 300){ rt_processing.shift(); }\r\n      if(backend_uptime.length >= 300){ backend_uptime.shift(); }\r\n      if(speed.length >= 300){ speed.shift(); }\r\n      if(users.length >= 300){ users.shift(); }\r\n      if(servers.length >= 300){ servers.shift(); }\r\n      if(commandsInput.length >= 300){ commandsInput.shift(); }\r\n      if(frontend_uptime.length >= 300){ frontend_uptime.shift(); }\r\n\r\n      //Add new data\r\n      index.push({ x: new Date(backendData.date), y: backendData.index });\r\n      rt_index.push({ x: new Date(backendData.date), y: backendData.rt_index });\r\n      clans.push({ x: new Date(backendData.date), y: backendData.clans });\r\n      rt_clans.push({ x: new Date(backendData.date), y: backendData.rt_clans });\r\n      processing.push({ x: new Date(backendData.date), y: backendData.processing });\r\n      rt_processing.push({ x: new Date(backendData.date), y: backendData.rt_processing });\r\n      backend_uptime.push({ x: new Date(backendData.date), y: backendData.uptime });\r\n      speed.push({ x: new Date(backendData.date), y: backendData.speed });\r\n      users.push({ x: new Date(frontendData.date), y: frontendData.users });\r\n      servers.push({ x: new Date(frontendData.date), y: frontendData.servers });\r\n      commandsInput.push({ x: new Date(frontendData.date), y: frontendData.commandsInput });\r\n      frontend_uptime.push({ x: new Date(frontendData.date), y: frontendData.uptime });\r\n\r\n      //Save state\r\n      this.setState({\r\n        status: { status: 'ready', statusText: `Finished Updating Analytics.`, loading: false },\r\n        backendData: { index, rt_index, clans, rt_clans, processing, rt_processing, uptime: backend_uptime, speed, APIStatus, APIFaults },\r\n        frontendData: { users, servers, commandsInput, uptime: frontend_uptime }\r\n      });\r\n    }\r\n  }\r\n  async UpdateAPIStatus() {\r\n    const apiStatus = await apiRequest.GetDailyAPIStatus();\r\n    const liveAPIStatusData = apiStatus.data.reverse();\r\n\r\n    let { index, rt_index, clans, rt_clans, processing, rt_processing, uptime, speed } = this.state.backendData;\r\n    let hours = new Date().getHours();\r\n    let APIFaults = { logs: 0, faults: 0 };\r\n    let APIStatus = {\r\n      0: { id: 0, faults: 0, defined: false, time: \"12-1am\", date : null, offset: 0-hours > 0 ? 0-hours-24 : 0-hours }, \r\n      1: { id: 1, faults: 0, defined: false, time: \"1-2am\", date: null, offset: 1-hours > 0 ? 1-hours-24 : 1-hours }, \r\n      2: { id: 2, faults: 0, defined: false, time: \"2-3am\", date: null, offset: 2-hours > 0 ? 2-hours-24 : 2-hours }, \r\n      3: { id: 3, faults: 0, defined: false, time: \"3-4am\", date: null, offset: 3-hours > 0 ? 3-hours-24 : 3-hours }, \r\n      4: { id: 4, faults: 0, defined: false, time: \"4-5am\", date: null, offset: 4-hours > 0 ? 4-hours-24 : 4-hours }, \r\n      5: { id: 5, faults: 0, defined: false, time: \"5-6am\", date: null, offset: 5-hours > 0 ? 5-hours-24 : 5-hours }, \r\n      6: { id: 6, faults: 0, defined: false, time: \"6-7am\", date: null, offset: 6-hours > 0 ? 6-hours-24 : 6-hours },\r\n      7: { id: 7, faults: 0, defined: false, time: \"7-8am\", date: null, offset: 7-hours > 0 ? 7-hours-24 : 7-hours }, \r\n      8: { id: 8, faults: 0, defined: false, time: \"8-9am\", date: null, offset: 8-hours > 0 ? 8-hours-24 : 8-hours }, \r\n      9: { id: 9, faults: 0, defined: false, time: \"9-10am\", date: null, offset: 9-hours > 0 ? 9-hours-24 : 9-hours }, \r\n      10: { id: 10, faults: 0, defined: false, time: \"10-11am\", date: null, offset: 10-hours > 0 ? 10-hours-24 : 10-hours }, \r\n      11: { id: 11, faults: 0, defined: false, time: \"11-12pm\", date: null, offset: 11-hours > 0 ? 11-hours-24 : 11-hours }, \r\n      12: { id: 12, faults: 0, defined: false, time: \"12-1pm\", date: null, offset: 12-hours > 0 ? 12-hours-24 : 12-hours },\r\n      13: { id: 13, faults: 0, defined: false, time: \"1-2pm\", date: null, offset: 13-hours > 0 ? 13-hours-24 : 13-hours }, \r\n      14: { id: 14, faults: 0, defined: false, time: \"2-3pm\", date: null, offset: 14-hours > 0 ? 14-hours-24 : 14-hours }, \r\n      15: { id: 15, faults: 0, defined: false, time: \"3-4pm\", date: null, offset: 15-hours > 0 ? 15-hours-24 : 15-hours }, \r\n      16: { id: 16, faults: 0, defined: false, time: \"4-5pm\", date: null, offset: 16-hours > 0 ? 16-hours-24 : 16-hours }, \r\n      17: { id: 17, faults: 0, defined: false, time: \"5-6pm\", date: null, offset: 17-hours > 0 ? 17-hours-24 : 17-hours }, \r\n      18: { id: 18, faults: 0, defined: false, time: \"6-7pm\", date: null, offset: 18-hours > 0 ? 18-hours-24 : 18-hours },\r\n      19: { id: 19, faults: 0, defined: false, time: \"7-8pm\", date: null, offset: 19-hours > 0 ? 19-hours-24 : 19-hours }, \r\n      20: { id: 20, faults: 0, defined: false, time: \"8-9pm\", date: null, offset: 20-hours > 0 ? 20-hours-24 : 20-hours },\r\n      21: { id: 21, faults: 0, defined: false, time: \"9-10pm\", date: null, offset: 21-hours > 0 ? 21-hours-24 : 21-hours },\r\n      22: { id: 22, faults: 0, defined: false, time: \"10-11pm\", date: null, offset: 22-hours > 0 ? 22-hours-24 : 22-hours },\r\n      23: { id: 23, faults: 0, defined: false, time: \"11-12am\", date: null, offset: 23-hours > 0 ? 23-hours-24 : 23-hours }\r\n    };\r\n\r\n    //Set loop index and go through and find faults.\r\n    for(let i in liveAPIStatusData) {\r\n      if(!APIStatus[new Date(liveAPIStatusData[i].date).getHours()].defined) { APIStatus[new Date(liveAPIStatusData[i].date).getHours()].defined = true; }\r\n      if(!liveAPIStatusData[i].APIStatus) { APIStatus[new Date(liveAPIStatusData[i].date).getHours()].faults++; APIFaults.faults++; }\r\n      APIStatus[new Date(liveAPIStatusData[i].date).getHours()].date = liveAPIStatusData[i].date;\r\n      APIFaults.logs++;\r\n    }\r\n\r\n    //Save state\r\n    this.setState({\r\n      status: { status: 'ready', statusText: `Finished Updating Analytics.`, loading: false },\r\n      backendData: { index, rt_index, clans, rt_clans, processing, rt_processing, uptime, speed, APIStatus, APIFaults }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { index, rt_index, clans, rt_clans, processing, rt_processing, speed, APIStatus, APIFaults } = this.state.backendData;\r\n    const { users, servers, commandsInput } = this.state.frontendData;\r\n    const backend_uptime = this.state.backendData.uptime;\r\n    const frontend_uptime = this.state.frontendData.uptime;\r\n    const { status, statusText } = this.state.status;\r\n    const onlineBox = (status) => {\r\n      return (\r\n        <div className=\"online-box\" data-tip data-for={`${ status.id }-tooltip`}>\r\n          <ReactTooltip id={`${ status.id }-tooltip`} place=\"top\" effect=\"solid\" backgroundColor=\"#2e842e\">\r\n            <div className=\"box-date\">{ new Date(status.date).toLocaleDateString(\"en-AU\", { year: 'numeric', month: 'long', day: 'numeric' }) } - { status.time }</div>\r\n            <div>No faults detected</div>\r\n          </ReactTooltip>\r\n        </div>\r\n      )\r\n    }\r\n    const warningBox = (status) => {\r\n      return (\r\n        <div className=\"warning-box\" data-tip data-for={`${ status.id }-tooltip`}>\r\n          <ReactTooltip id={`${ status.id }-tooltip`} place=\"top\" effect=\"solid\" backgroundColor=\"#b2b358\">\r\n            <div className=\"box-date\">{ new Date(status.date).toLocaleDateString(\"en-AU\", { year: 'numeric', month: 'long', day: 'numeric' }) } - { status.time }</div>\r\n            <div>Some faults detected</div>\r\n          </ReactTooltip>\r\n        </div>\r\n      )\r\n    }\r\n    const offlineBox = (status) => {\r\n      return (\r\n        <div className=\"offline-box\" data-tip data-for={`${ status.id }-tooltip`}>\r\n          <ReactTooltip id={`${ status.id }-tooltip`} place=\"top\" effect=\"solid\" backgroundColor=\"#bf4949\">\r\n            <div className=\"box-date\">{ new Date(status.date).toLocaleDateString(\"en-AU\", { year: 'numeric', month: 'long', day: 'numeric' }) } - { status.time }</div>\r\n            <div>Major outage detected</div>\r\n          </ReactTooltip>\r\n        </div>\r\n      )\r\n    }\r\n    if(status === \"error\") { return (<Error statusText={ statusText } />) }\r\n    else if(status === \"ready\") {\r\n      return (\r\n        <div className=\"page-content\">\r\n          <div className=\"status-info\">\r\n            <div className=\"status-info-category\">\r\n              <div className=\"status-info-title\">Bungie API Status</div>\r\n              <div className=\"status-info-data\">\r\n                {\r\n                  Object.values(APIStatus).sort((a,b) => a.offset - b.offset).map((status) => {\r\n                    if(status.defined) {\r\n                      if(status.faults === 0) { return onlineBox(status); }\r\n                      else if(status.faults > 43200) { return offlineBox(status); }\r\n                      else { return warningBox(status); }\r\n                    }\r\n                    else { return offlineBox(status); }\r\n                  })\r\n                }\r\n              </div>\r\n              <div className=\"status-info-uptime\">{ 100 - ((APIFaults.faults/APIFaults.logs) * 100).toFixed(2) }% UPTIME</div>\r\n            </div>\r\n            <div className=\"status-info-category\">\r\n              <div className=\"status-info-title\">Marvin Backend Status - { formatSmallTime(backend_uptime[backend_uptime.length-1].y / 1000) }</div>\r\n              <div className=\"status-info-data\">\r\n                {\r\n                  Object.values(APIStatus).sort((a,b) => a.offset - b.offset).map((status) => {\r\n                    if(status.defined) {\r\n                      if(status.faults === 0) { return onlineBox(status); }\r\n                      else if(status.faults > 43200) { return offlineBox(status); }\r\n                      else { return warningBox(status); }\r\n                    }\r\n                    else { return offlineBox(status); }\r\n                  })\r\n                }\r\n              </div>\r\n              <div className=\"status-info-uptime\">{ 100 - ((APIFaults.faults/APIFaults.logs) * 100).toFixed(2) }% UPTIME</div>\r\n            </div>\r\n            <div className=\"status-info-category\">\r\n              <div className=\"status-info-title\">Marvin Frontend Status - { formatSmallTime(frontend_uptime[frontend_uptime.length-1].y / 1000) }</div>\r\n              <div className=\"status-info-data\">\r\n                {\r\n                  Object.values(APIStatus).sort((a,b) => a.offset - b.offset).map((status) => {\r\n                    if(status.defined) {\r\n                      if(status.faults === 0) { return onlineBox(status); }\r\n                      else if(status.faults > 43200) { return offlineBox(status); }\r\n                      else { return warningBox(status); }\r\n                    }\r\n                    else { return offlineBox(status); }\r\n                  })\r\n                }\r\n              </div>\r\n              <div className=\"status-info-uptime\">{ 100 - ((APIFaults.faults/APIFaults.logs) * 100).toFixed(2) }% UPTIME</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"graph-container\">\r\n            <div className=\"graph\" id=\"clans-graph\">\r\n              <div className=\"graph-title\">Clans (1s Interval)</div>\r\n              <div className=\"graph-data\">\r\n                <div>{ processing ? `Tracking: ${ clans[clans.length-1].y } Clans` : `Offline` }</div>\r\n              </div>\r\n              <XYPlot xType=\"time\" width={ 550 } height={ 250 } yDomain={[0, Math.max.apply(Math, clans.map(function(o) { return o.y; }))+1]}>\r\n                <VerticalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <HorizontalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <XAxis title=\"Time\" />\r\n                <YAxis title=\"Clans\" />\r\n                <AreaSeries data={ clans } color={ \"#00a6ef\" } fill={ \"#1c5169\" } opacity={ 0.7 } curve={'curveLinear'} />\r\n              </XYPlot>\r\n            </div>\r\n            <div className=\"graph\" id=\"index-graph\">\r\n              <div className=\"graph-title\">Index (1s Interval)</div>\r\n              <div className=\"graph-data\">\r\n                <div>{ index ? `Current Index: ${ index[index.length-1].y }` : `Offline` }</div>\r\n              </div>\r\n              <XYPlot xType=\"time\" width={ 550 } height={ 250 } yDomain={[0, Math.max.apply(Math, index.map(function(o) { return o.y; }))+1]}>\r\n                <VerticalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <HorizontalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <XAxis title=\"Time\" />\r\n                <YAxis title=\"Index\" />\r\n                <AreaSeries data={ index } color={ \"#00a6ef\" } fill={ \"#1c5169\" } opacity={ 0.7 } curve={'curveLinear'} />\r\n              </XYPlot>\r\n            </div>\r\n            <div className=\"graph\" id=\"processing-graph\">\r\n              <div className=\"graph-title\">Processing (1s Interval)</div>\r\n              <div className=\"graph-data\">\r\n                <div>{ processing ? `Currently Processing: ${ processing[processing.length-1].y }` : `Offline` }</div>\r\n              </div>\r\n              <XYPlot xType=\"time\" width={ 550 } height={ 250 } yDomain={[0, Math.max.apply(Math, processing.map(function(o) { return o.y; }))+1]}>\r\n                <VerticalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <HorizontalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <XAxis title=\"Time\" />\r\n                <YAxis title=\"Clans\" />\r\n                <AreaSeries data={ processing } color={ \"#00a6ef\" } fill={ \"#1c5169\" } opacity={ 0.7 } curve={'curveLinear'} />\r\n              </XYPlot>\r\n            </div>\r\n            <div className=\"graph\" id=\"rt_clans-graph\">\r\n              <div className=\"graph-title\">RT Clans (1s Interval)</div>\r\n              <div className=\"graph-data\">\r\n                <div>{ rt_clans ? `Tracking: ${ rt_clans[rt_clans.length-1].y } Clans` : `Offline` }</div>\r\n              </div>\r\n              <XYPlot xType=\"time\" width={ 550 } height={ 250 } yDomain={[0, Math.max.apply(Math, rt_clans.map(function(o) { return o.y; }))+1]}>\r\n                <VerticalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <HorizontalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <XAxis title=\"Time\" />\r\n                <YAxis title=\"Clans\" />\r\n                <AreaSeries data={ rt_clans } color={ \"#00bbaf\" } fill={ \"#1b4d53\" } opacity={ 0.7 } curve={'curveLinear'} />\r\n              </XYPlot>\r\n            </div>\r\n            <div className=\"graph\" id=\"rt_index-graph\">\r\n              <div className=\"graph-title\">RT Index (1s Interval)</div>\r\n              <div className=\"graph-data\">\r\n                <div>{ rt_index ? `Current Index: ${ rt_index[rt_index.length-1].y }` : `Offline` }</div>\r\n              </div>\r\n              <XYPlot xType=\"time\" width={ 550 } height={ 250 } yDomain={[0, Math.max.apply(Math, rt_index.map(function(o) { return o.y; }))+1]}>\r\n                <VerticalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <HorizontalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <XAxis title=\"Time\" />\r\n                <YAxis title=\"Index\" />\r\n                <AreaSeries data={ rt_index } color={ \"#00bbaf\" } fill={ \"#1b4d53\" } opacity={ 0.7 } curve={'curveLinear'} />\r\n              </XYPlot>\r\n            </div>\r\n            <div className=\"graph\" id=\"rt_processing-graph\">\r\n              <div className=\"graph-title\">RT Processing (1s Interval)</div>\r\n              <div className=\"graph-data\">\r\n                <div>{ rt_processing ? `Currently Processing: ${ rt_processing[processing.length-1].y }` : `Offline` }</div>\r\n              </div>\r\n              <XYPlot xType=\"time\" width={ 550 } height={ 250 } yDomain={[0, Math.max.apply(Math, rt_processing.map(function(o) { return o.y; }))+1]}>\r\n                <VerticalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <HorizontalGridLines style={{ stroke: \"rgba(0,0,0,0.1)\" }} />\r\n                <XAxis title=\"Time\" />\r\n                <YAxis title=\"Clans\" />\r\n                <AreaSeries data={ rt_processing } color={ \"#00bbaf\" } fill={ \"#1b4d53\" } opacity={ 0.7 } curve={'curveLinear'} />\r\n              </XYPlot>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else { return (<Loader statusText={ statusText } />) }\r\n  }\r\n}\r\n\r\nexport default Status;","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\pages\\Logs.js",["160","161","162","163","164","165","166","167","168","169","170"],"import React, { useEffect, useRef } from 'react';\r\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, AreaSeries } from 'react-vis';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Error from '../modules/Error';\r\nimport Loader from '../modules/Loader';\r\nimport { formatSmallTime } from '../modules/Misc';\r\nimport * as apiRequest from '../modules/requests/API';\r\n\r\nlet updateTimer = null;\r\n\r\nclass Logs extends React.Component {\r\n  state = {\r\n    status: {\r\n      status: 'startUp',\r\n      statusText: 'Getting ready!',\r\n      error: null,\r\n      loading: true\r\n    },\r\n    logs: {\r\n      frontend: { },\r\n      backend: { },\r\n      express: { },\r\n      database: { },\r\n      globals: { },\r\n      errorHandler: { }\r\n    },\r\n    lastUpdate: new Date().toISOString()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ status: { status: 'startUp', statusText: `Checking authorization...`, loading: true } });\r\n    this.CheckAuthorization();\r\n  }\r\n  componentWillUnmount() { clearInterval(updateTimer); updateTimer = null; }\r\n\r\n  async CheckAuthorization() {\r\n    const adminToken = localStorage.getItem(\"adminToken\");\r\n    if(adminToken) {\r\n      await apiRequest.CheckAuthorization({ token: adminToken }).then((response) => {\r\n        if(response.code === 200) {\r\n          if(this.state.status.status === \"startUp\") { this.SetupLogs(); }\r\n          setTimeout(() => this.CheckAuthorization(), 1000 * 60);\r\n        }\r\n        else { window.location.href = \"/\"; }\r\n      });\r\n    }\r\n    else { window.location.href = \"/\"; }\r\n  }\r\n\r\n  async SetupLogs() {\r\n    this.setState({ status: { status: 'startingUp', statusText: `Obtaining the logs...`, loading: true } });\r\n    await Promise.all([\r\n      await apiRequest.GetFrontendStartup(),\r\n      await apiRequest.GetBackendStartup(),\r\n      await apiRequest.GetExpressStartup(),\r\n      await apiRequest.GetGlobalsStartup()\r\n    ]).then(async (data) => {\r\n      let frontendStartup = data[0]; let backendStartup = data[1]; let expressStartup = data[2]; let globalsStartup = data[3];\r\n      if(!frontendStartup?.isError && !backendStartup?.isError && !expressStartup?.isError && !globalsStartup?.isError) {\r\n        await Promise.all([\r\n          await apiRequest.GetFrontendLogs({ date: frontendStartup.data[0].date }),\r\n          await apiRequest.GetBackendLogs({ date: backendStartup.data[0].date }),\r\n          await apiRequest.GetExpressLogs({ date: expressStartup.data[0].date }),\r\n          await apiRequest.GetDatabaseLogs({ date: frontendStartup.data[0].date }),\r\n          await apiRequest.GetBroadcastLogs({ date: frontendStartup.data[0].date }),\r\n          await apiRequest.GetGlobalsLogs({ date: globalsStartup.data[0].date }),\r\n          await apiRequest.GetErrorHandlerLogs({ date: new Date((new Date() - (1000 * 86400)) + 37800000).toISOString() })\r\n        ]).then((log_data) => {\r\n\r\n          //Save state\r\n          this.setState({\r\n            status: { status: 'ready', statusText: `Finished Updating Logs.`, loading: false },\r\n            logs: {\r\n              frontend: log_data[0].data.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()),\r\n              backend: log_data[1].data.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()),\r\n              express: log_data[2].data.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()),\r\n              database: log_data[3].data.concat(log_data[4].data).sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()),\r\n              globals: log_data[5].data.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()),\r\n              errorHandler: log_data[6].data.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()),\r\n            },\r\n            lastUpdate: new Date().toISOString()\r\n          });\r\n\r\n          //Start update timer\r\n          if(updateTimer === null) { updateTimer = setInterval(() => { this.UpdateLogs(); }, 5000); }\r\n        });\r\n      }\r\n      else {\r\n        //Save error state\r\n        this.setState({ status: { status: 'error', statusText: `Error Loading Logs. Server Offline. Re-checking in 5 seconds.`, loading: false } });\r\n        setTimeout(() => { this.SetupLogs() }, 5000);\r\n      }\r\n    });\r\n  }\r\n  async UpdateLogs() {\r\n    let logs = await apiRequest.GetLogs({ date: this.state.lastUpdate });\r\n    let broadcast_logs = await apiRequest.GetBroadcastLogs({ date: this.state.lastUpdate });\r\n    if(!logs?.isError) {\r\n      if(logs.data.length > 0 || broadcast_logs.data.length > 0) {\r\n        let { frontend, backend, express, database, globals, errorHandler } = this.state.logs;\r\n        let startupDetected = false;\r\n        for(let i in broadcast_logs.data) { database.unshift(broadcast_logs.data[i]); }\r\n        for(let i in logs.data) {\r\n          if(logs.data[i].type === \"Startup\") { startupDetected = true; }\r\n          else {\r\n            switch(logs.data[i].location || logs.data[i].type) {\r\n              case \"Frontend\": { frontend.unshift(logs.data[i]); break; }\r\n              case \"Backend\": { backend.unshift(logs.data[i]); break; }\r\n              case \"Express\": { express.unshift(logs.data[i]); break; }\r\n              case \"Database\": { database.unshift(logs.data[i]); break; }\r\n              case \"Globals\": { globals.unshift(logs.data[i]); break; }\r\n              case \"Error\": { errorHandler.unshift(logs.data[i]); break; }\r\n            }\r\n          }\r\n        }\r\n        if(!startupDetected) {\r\n          frontend.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n          backend.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n          express.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n          database.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n          globals.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n          errorHandler.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n          \r\n          //Save state\r\n          this.setState({\r\n            status: { status: 'ready', statusText: `Finished Updating Logs.`, loading: false },\r\n            logs: { frontend, backend, express, database, globals, errorHandler },\r\n            lastUpdate: new Date().toISOString()\r\n          });\r\n        }\r\n        else { this.SetupLogs() }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { status, statusText } = this.state.status;\r\n    if(status === \"error\") { return (<Error statusText={ statusText } />) }\r\n    else if(status === \"ready\") {\r\n      const { frontend, backend, express, database, globals, errorHandler } = this.state.logs;\r\n      const buildLog = (log, type) => {\r\n        return (\r\n          <div className={`${ type }-log-data`}>\r\n            <div className={`${ log.type }-log`}>{ log.type }</div>\r\n            <div className={`${ log.type }-log`}>{ log.log }</div>\r\n            <div className={`${ log.type }-log`}>{ new Date(log.date).toLocaleString(\"en-AU\") }</div>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div className=\"page-content\" style={{ overflow: \"hidden\" }}>\r\n          <h2 className=\"logs-page-title\">Marvins Logs</h2>\r\n          <div className=\"logs-container\">\r\n            <div className=\"log-container\" id=\"backend\">\r\n              <div className=\"log-info\">\r\n                <div className=\"log-info-name\">Backend</div>\r\n              </div>\r\n              <div className=\"logs scrollbar\" id=\"backend-logs\">{ backend.map((log) => { return buildLog(log, \"backend\") }) }</div>\r\n            </div>\r\n            <div className=\"log-container\" id=\"frontend\">\r\n              <div className=\"log-info\">\r\n                <div className=\"log-info-name\">Frontend</div>\r\n              </div>\r\n              <div className=\"logs scrollbar\" id=\"frontend-logs\">{ frontend.map((log) => { return buildLog(log, \"frontend\") }) }</div>\r\n            </div>\r\n            <div className=\"log-container\" id=\"express\">\r\n              <div className=\"log-info\">\r\n                <div className=\"log-info-name\">Express</div>\r\n              </div>\r\n              <div className=\"logs scrollbar\" id=\"express-logs\">{ express.map((log) => { return buildLog(log, \"express\") }) }</div>\r\n            </div>\r\n            <div className=\"log-container\" id=\"globals\">\r\n              <div className=\"log-info\">\r\n                <div className=\"log-info-name\">Globals</div>\r\n              </div>\r\n              <div className=\"logs scrollbar\" id=\"globals-logs\">{ globals.map((log) => { return buildLog(log, \"globals\") }) }</div>\r\n            </div>\r\n            <div className=\"log-container\" id=\"database\">\r\n              <div className=\"log-info\">\r\n                <div className=\"log-info-name\">Database</div>\r\n              </div>\r\n              <div className=\"logs scrollbar\" id=\"database-logs\">{ database.map((log) => { return buildLog(log, \"database\") }) }</div>\r\n            </div>\r\n            <div className=\"log-container\" id=\"errorHandler\">\r\n              <div className=\"log-info\">\r\n                <div className=\"log-info-name\">Errors</div>\r\n              </div>\r\n              <div className=\"logs scrollbar\" id=\"errorHandler-logs\">{ errorHandler.map((log) => { return buildLog(log, \"errorHandler\") }) }</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else { return (<Loader statusText={ statusText } />) }\r\n  }\r\n}\r\n\r\nexport default Logs;","D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\scripts\\Checks.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\pages\\Commands.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\handlers\\ManifestHandler.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\Misc.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\Misc.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\requests\\Database.js",[],["171","172"],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\requests\\API.js",[],"D:\\Programs\\Redux Marvin.gg\\marvin.gg\\src\\modules\\requests\\BungieReq.js",[],"D:\\Programs\\marvin.gg\\src\\index.js",[],"D:\\Programs\\marvin.gg\\src\\App.js",["173"],"D:\\Programs\\marvin.gg\\src\\modules\\Header.js",["174","175","176","177","178"],"D:\\Programs\\marvin.gg\\src\\modules\\Error.js",[],["179","180"],"D:\\Programs\\marvin.gg\\src\\modules\\Settings.js",[],"D:\\Programs\\marvin.gg\\src\\modules\\Loader.js",[],"D:\\Programs\\marvin.gg\\src\\pages\\Home.js",[],"D:\\Programs\\marvin.gg\\src\\pages\\Commands.js",[],"D:\\Programs\\marvin.gg\\src\\pages\\Logs.js",["181","182","183","184","185","186","187","188","189","190","191"],"D:\\Programs\\marvin.gg\\src\\modules\\scripts\\Checks.js",["192"],"D:\\Programs\\marvin.gg\\src\\pages\\Status.js",["193","194","195","196"],"D:\\Programs\\marvin.gg\\src\\modules\\handlers\\ManifestHandler.js",["197"],"D:\\Programs\\marvin.gg\\src\\modules\\Misc.js",[],"D:\\Programs\\marvin.gg\\src\\Misc.js",[],"D:\\Programs\\marvin.gg\\src\\modules\\requests\\BungieReq.js",[],"D:\\Programs\\marvin.gg\\src\\modules\\requests\\API.js",[],"D:\\Programs\\marvin.gg\\src\\modules\\SmallLoader.js",["198","199"],"D:\\Programs\\marvin.gg\\src\\modules\\requests\\DiscordAuth.js",["200","201"],{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":14,"column":13,"nodeType":"208","messageId":"209","endLine":14,"endColumn":21},{"ruleId":"210","severity":1,"message":"211","line":131,"column":91,"nodeType":"212","endLine":131,"endColumn":157},{"ruleId":"210","severity":1,"message":"211","line":132,"column":91,"nodeType":"212","endLine":132,"endColumn":158},{"ruleId":"210","severity":1,"message":"211","line":133,"column":86,"nodeType":"212","endLine":133,"endColumn":150},{"ruleId":"206","severity":1,"message":"213","line":249,"column":74,"nodeType":"208","messageId":"209","endLine":249,"endColumn":79},{"ruleId":"206","severity":1,"message":"214","line":250,"column":13,"nodeType":"208","messageId":"209","endLine":250,"endColumn":18},{"ruleId":"206","severity":1,"message":"215","line":250,"column":20,"nodeType":"208","messageId":"209","endLine":250,"endColumn":27},{"ruleId":"206","severity":1,"message":"216","line":250,"column":29,"nodeType":"208","messageId":"209","endLine":250,"endColumn":42},{"ruleId":"206","severity":1,"message":"217","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"206","severity":1,"message":"218","line":1,"column":28,"nodeType":"208","messageId":"209","endLine":1,"endColumn":34},{"ruleId":"206","severity":1,"message":"219","line":2,"column":10,"nodeType":"208","messageId":"209","endLine":2,"endColumn":16},{"ruleId":"206","severity":1,"message":"220","line":2,"column":18,"nodeType":"208","messageId":"209","endLine":2,"endColumn":23},{"ruleId":"206","severity":1,"message":"221","line":2,"column":25,"nodeType":"208","messageId":"209","endLine":2,"endColumn":30},{"ruleId":"206","severity":1,"message":"222","line":2,"column":32,"nodeType":"208","messageId":"209","endLine":2,"endColumn":49},{"ruleId":"206","severity":1,"message":"223","line":2,"column":51,"nodeType":"208","messageId":"209","endLine":2,"endColumn":70},{"ruleId":"206","severity":1,"message":"224","line":2,"column":72,"nodeType":"208","messageId":"209","endLine":2,"endColumn":82},{"ruleId":"206","severity":1,"message":"225","line":3,"column":8,"nodeType":"208","messageId":"209","endLine":3,"endColumn":20},{"ruleId":"206","severity":1,"message":"226","line":6,"column":10,"nodeType":"208","messageId":"209","endLine":6,"endColumn":25},{"ruleId":"227","severity":1,"message":"228","line":106,"column":13,"nodeType":"229","messageId":"230","endLine":113,"endColumn":14},{"ruleId":"202","replacedBy":"231"},{"ruleId":"204","replacedBy":"232"},{"ruleId":"206","severity":1,"message":"233","line":21,"column":5,"nodeType":"208","messageId":"209","endLine":21,"endColumn":10},{"ruleId":"206","severity":1,"message":"234","line":3,"column":8,"nodeType":"208","messageId":"209","endLine":3,"endColumn":14},{"ruleId":"206","severity":1,"message":"235","line":4,"column":13,"nodeType":"208","messageId":"209","endLine":4,"endColumn":17},{"ruleId":"210","severity":1,"message":"211","line":82,"column":91,"nodeType":"212","endLine":82,"endColumn":157},{"ruleId":"210","severity":1,"message":"211","line":83,"column":91,"nodeType":"212","endLine":83,"endColumn":158},{"ruleId":"210","severity":1,"message":"211","line":84,"column":86,"nodeType":"212","endLine":84,"endColumn":150},{"ruleId":"202","replacedBy":"236"},{"ruleId":"204","replacedBy":"237"},{"ruleId":"206","severity":1,"message":"217","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"206","severity":1,"message":"218","line":1,"column":28,"nodeType":"208","messageId":"209","endLine":1,"endColumn":34},{"ruleId":"206","severity":1,"message":"219","line":2,"column":10,"nodeType":"208","messageId":"209","endLine":2,"endColumn":16},{"ruleId":"206","severity":1,"message":"220","line":2,"column":18,"nodeType":"208","messageId":"209","endLine":2,"endColumn":23},{"ruleId":"206","severity":1,"message":"221","line":2,"column":25,"nodeType":"208","messageId":"209","endLine":2,"endColumn":30},{"ruleId":"206","severity":1,"message":"222","line":2,"column":32,"nodeType":"208","messageId":"209","endLine":2,"endColumn":49},{"ruleId":"206","severity":1,"message":"223","line":2,"column":51,"nodeType":"208","messageId":"209","endLine":2,"endColumn":70},{"ruleId":"206","severity":1,"message":"224","line":2,"column":72,"nodeType":"208","messageId":"209","endLine":2,"endColumn":82},{"ruleId":"206","severity":1,"message":"225","line":3,"column":8,"nodeType":"208","messageId":"209","endLine":3,"endColumn":20},{"ruleId":"206","severity":1,"message":"226","line":6,"column":10,"nodeType":"208","messageId":"209","endLine":6,"endColumn":25},{"ruleId":"227","severity":1,"message":"228","line":106,"column":13,"nodeType":"229","messageId":"230","endLine":113,"endColumn":14},{"ruleId":"206","severity":1,"message":"238","line":1,"column":10,"nodeType":"208","messageId":"209","endLine":1,"endColumn":18},{"ruleId":"206","severity":1,"message":"213","line":249,"column":74,"nodeType":"208","messageId":"209","endLine":249,"endColumn":79},{"ruleId":"206","severity":1,"message":"214","line":250,"column":13,"nodeType":"208","messageId":"209","endLine":250,"endColumn":18},{"ruleId":"206","severity":1,"message":"215","line":250,"column":20,"nodeType":"208","messageId":"209","endLine":250,"endColumn":27},{"ruleId":"206","severity":1,"message":"216","line":250,"column":29,"nodeType":"208","messageId":"209","endLine":250,"endColumn":42},{"ruleId":"239","severity":1,"message":"240","line":92,"column":102,"nodeType":"241","messageId":"242","endLine":92,"endColumn":107},{"ruleId":"206","severity":1,"message":"243","line":6,"column":7,"nodeType":"208","messageId":"209","endLine":6,"endColumn":27},{"ruleId":"210","severity":1,"message":"211","line":16,"column":32,"nodeType":"212","endLine":16,"endColumn":70},{"ruleId":"206","severity":1,"message":"244","line":8,"column":5,"nodeType":"208","messageId":"209","endLine":8,"endColumn":25},{"ruleId":"206","severity":1,"message":"245","line":10,"column":7,"nodeType":"208","messageId":"209","endLine":10,"endColumn":18},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'Manifest' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'speed' is assigned a value but never used.","'users' is assigned a value but never used.","'servers' is assigned a value but never used.","'commandsInput' is assigned a value but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'XYPlot' is defined but never used.","'XAxis' is defined but never used.","'YAxis' is defined but never used.","'VerticalGridLines' is defined but never used.","'HorizontalGridLines' is defined but never used.","'AreaSeries' is defined but never used.","'ReactTooltip' is defined but never used.","'formatSmallTime' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["246"],["247"],"'store' is assigned a value but never used.","'Config' is defined but never used.","'Misc' is defined but never used.",["246"],["247"],"'MANIFEST' is defined but never used.","no-dupe-keys","Duplicate key 'error'.","ObjectExpression","unexpected","'abilityLoaderOptions' is assigned a value but never used.","'discord_webhooks_url' is assigned a value but never used.","'encodedAuth' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]